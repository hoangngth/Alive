// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ToDo
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	ReadAllRequest
	ReadAllResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Taks we have to do
type ToDo struct {
	// Unique integer identifier of the todo task
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Title of the task
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// Detail description of the todo task
	Description string                     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	InsertAt    *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=insert_at,json=insertAt" json:"insert_at,omitempty"`
	UpdateAt    *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=update_at,json=updateAt" json:"update_at,omitempty"`
}

func (m *ToDo) Reset()                    { *m = ToDo{} }
func (m *ToDo) String() string            { return proto1.CompactTextString(m) }
func (*ToDo) ProtoMessage()               {}
func (*ToDo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ToDo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ToDo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ToDo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ToDo) GetInsertAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.InsertAt
	}
	return nil
}

func (m *ToDo) GetUpdateAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateAt
	}
	return nil
}

// Request data to create new todo task
type CreateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Task entity to add
	ToDo *ToDo `protobuf:"bytes,2,opt,name=toDo" json:"toDo,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateRequest) GetToDo() *ToDo {
	if m != nil {
		return m.ToDo
	}
	return nil
}

// Contains data of created todo task
type CreateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// ID of created task
	Id int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto1.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Request data to read todo task
type ReadRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Unique integer identifier of the todo task
	Id int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Contains todo task data specified in by ID request
type ReadResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Task entity read by ID
	ToDo *ToDo `protobuf:"bytes,2,opt,name=toDo" json:"toDo,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadResponse) GetToDo() *ToDo {
	if m != nil {
		return m.ToDo
	}
	return nil
}

// Request data to update todo task
type UpdateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Task entity to update
	ToDo *ToDo `protobuf:"bytes,2,opt,name=toDo" json:"toDo,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UpdateRequest) GetToDo() *ToDo {
	if m != nil {
		return m.ToDo
	}
	return nil
}

// Contains status of update operation
type UpdateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Contains number of entities have beed updated
	// Equals 1 in case of succesfull update
	Updated int64 `protobuf:"varint,2,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto1.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// Request data to delete todo task
type DeleteRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Unique integer identifier of the todo task to delete
	Id int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Contains status of delete operation
type DeleteResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// Contains number of entities have beed deleted
	// Equals 1 in case of succesfull delete
	Deleted int64 `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

// Request data to read all todo task
type ReadAllRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
}

func (m *ReadAllRequest) Reset()                    { *m = ReadAllRequest{} }
func (m *ReadAllRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadAllRequest) ProtoMessage()               {}
func (*ReadAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadAllRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

// Contains list of all todo tasks
type ReadAllResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api" json:"api,omitempty"`
	// List of all todo tasks
	ToDos []*ToDo `protobuf:"bytes,2,rep,name=toDos" json:"toDos,omitempty"`
}

func (m *ReadAllResponse) Reset()                    { *m = ReadAllResponse{} }
func (m *ReadAllResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadAllResponse) ProtoMessage()               {}
func (*ReadAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReadAllResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadAllResponse) GetToDos() []*ToDo {
	if m != nil {
		return m.ToDos
	}
	return nil
}

func init() {
	proto1.RegisterType((*ToDo)(nil), "proto.ToDo")
	proto1.RegisterType((*CreateRequest)(nil), "proto.CreateRequest")
	proto1.RegisterType((*CreateResponse)(nil), "proto.CreateResponse")
	proto1.RegisterType((*ReadRequest)(nil), "proto.ReadRequest")
	proto1.RegisterType((*ReadResponse)(nil), "proto.ReadResponse")
	proto1.RegisterType((*UpdateRequest)(nil), "proto.UpdateRequest")
	proto1.RegisterType((*UpdateResponse)(nil), "proto.UpdateResponse")
	proto1.RegisterType((*DeleteRequest)(nil), "proto.DeleteRequest")
	proto1.RegisterType((*DeleteResponse)(nil), "proto.DeleteResponse")
	proto1.RegisterType((*ReadAllRequest)(nil), "proto.ReadAllRequest")
	proto1.RegisterType((*ReadAllResponse)(nil), "proto.ReadAllResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ToDoService service

type ToDoServiceClient interface {
	// Create new todo task
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Read todo task
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Update todo task
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete todo task
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Read all todo tasks
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
}

type toDoServiceClient struct {
	cc *grpc.ClientConn
}

func NewToDoServiceClient(cc *grpc.ClientConn) ToDoServiceClient {
	return &toDoServiceClient{cc}
}

func (c *toDoServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/proto.ToDoService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/proto.ToDoService/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/proto.ToDoService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/proto.ToDoService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := grpc.Invoke(ctx, "/proto.ToDoService/ReadAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ToDoService service

type ToDoServiceServer interface {
	// Create new todo task
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Read todo task
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Update todo task
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete todo task
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Read all todo tasks
	ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
}

func RegisterToDoServiceServer(s *grpc.Server, srv ToDoServiceServer) {
	s.RegisterService(&_ToDoService_serviceDesc, srv)
}

func _ToDoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToDoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToDoService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToDoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToDoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToDoService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToDoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ToDoService",
	HandlerType: (*ToDoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ToDoService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ToDoService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToDoService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToDoService_Delete_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _ToDoService_ReadAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto1.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x6e, 0x9b, 0x40,
	0x10, 0x16, 0xd8, 0x90, 0x7a, 0x28, 0xb4, 0xda, 0x26, 0x15, 0xe2, 0x12, 0xba, 0x27, 0x9f, 0x40,
	0xa5, 0xb2, 0xda, 0x43, 0x2e, 0xa4, 0x56, 0x1f, 0x80, 0xa6, 0xe7, 0x8a, 0x84, 0x69, 0xb4, 0x12,
	0xf1, 0x52, 0x76, 0xdd, 0xb7, 0xe9, 0xbb, 0xf4, 0xd1, 0xaa, 0xdd, 0x65, 0xa9, 0x41, 0x25, 0x39,
	0xe4, 0x64, 0xcf, 0xcf, 0x37, 0xdf, 0x37, 0xdf, 0x2c, 0x10, 0x0a, 0xec, 0x7f, 0xb1, 0x3b, 0xcc,
	0xba, 0x9e, 0x4b, 0x4e, 0x3c, 0xfd, 0x93, 0x5c, 0xde, 0x73, 0x7e, 0xdf, 0x62, 0xae, 0xa3, 0xdb,
	0xe3, 0x8f, 0x5c, 0xb2, 0x07, 0x14, 0xb2, 0x7e, 0xe8, 0x4c, 0x1f, 0xfd, 0xe3, 0xc0, 0xfa, 0x86,
	0xef, 0x39, 0x89, 0xc0, 0x65, 0x4d, 0xec, 0xa4, 0xce, 0x76, 0x55, 0xb9, 0xac, 0x21, 0xe7, 0xe0,
	0x49, 0x26, 0x5b, 0x8c, 0xdd, 0xd4, 0xd9, 0x6e, 0x2a, 0x13, 0x90, 0x14, 0x82, 0x06, 0xc5, 0x5d,
	0xcf, 0x3a, 0xc9, 0xf8, 0x21, 0x5e, 0xe9, 0xda, 0x69, 0x8a, 0x7c, 0x84, 0x0d, 0x3b, 0x08, 0xec,
	0xe5, 0xf7, 0x5a, 0xc6, 0xeb, 0xd4, 0xd9, 0x06, 0x45, 0x92, 0x19, 0x15, 0x99, 0x55, 0x91, 0xdd,
	0x58, 0x15, 0xd5, 0x0b, 0xd3, 0x5c, 0x4a, 0x05, 0x3c, 0x76, 0x4d, 0x2d, 0x51, 0x01, 0xbd, 0xa7,
	0x81, 0xa6, 0xb9, 0x94, 0xf4, 0x1a, 0xc2, 0xcf, 0x3d, 0xd6, 0x12, 0x2b, 0xfc, 0x79, 0x44, 0x21,
	0xc9, 0x6b, 0x58, 0xd5, 0x1d, 0xd3, 0xbb, 0x6c, 0x2a, 0xf5, 0x97, 0x5c, 0xc2, 0x5a, 0xf2, 0x3d,
	0xd7, 0xbb, 0x04, 0x45, 0x60, 0xe6, 0x65, 0x6a, 0xef, 0x4a, 0x17, 0x68, 0x01, 0x91, 0x9d, 0x21,
	0x3a, 0x7e, 0x10, 0xf8, 0x9f, 0x21, 0xc6, 0x21, 0xd7, 0x3a, 0x44, 0x73, 0x08, 0x2a, 0xac, 0x9b,
	0x65, 0xd6, 0x39, 0xa0, 0x84, 0x97, 0x06, 0xb0, 0x48, 0xf1, 0xa4, 0xce, 0x6b, 0x08, 0xbf, 0xe9,
	0xbd, 0x9f, 0xb1, 0xeb, 0x15, 0x44, 0x76, 0xc6, 0xa2, 0x90, 0x18, 0xce, 0x8c, 0xbf, 0x56, 0xbf,
	0x0d, 0xe9, 0x7b, 0x08, 0xf7, 0xd8, 0xe2, 0x63, 0x0a, 0xe6, 0x7b, 0x5f, 0x41, 0x64, 0x21, 0x8f,
	0x11, 0x36, 0xba, 0x67, 0x24, 0x1c, 0x42, 0x4a, 0x21, 0x52, 0xae, 0x95, 0x6d, 0xbb, 0xc8, 0x48,
	0xbf, 0xc0, 0xab, 0xb1, 0x67, 0x91, 0xe2, 0x1d, 0x78, 0x6a, 0x7f, 0x11, 0xbb, 0xe9, 0x6a, 0xee,
	0x8c, 0xa9, 0x14, 0xbf, 0x5d, 0x08, 0x54, 0xfc, 0xd5, 0x7c, 0x4b, 0x64, 0x07, 0xbe, 0x79, 0x16,
	0xe4, 0x7c, 0xe8, 0x9e, 0xbc, 0xb4, 0xe4, 0x62, 0x96, 0x1d, 0xb8, 0x73, 0x58, 0x2b, 0x39, 0x84,
	0x0c, 0xe5, 0x93, 0x67, 0x92, 0xbc, 0x99, 0xe4, 0x06, 0xc0, 0x0e, 0x7c, 0x73, 0x92, 0x91, 0x67,
	0x72, 0xe5, 0x91, 0x67, 0x76, 0xb7, 0x1d, 0xf8, 0xc6, 0xd8, 0x11, 0x36, 0x39, 0xcd, 0x08, 0x9b,
	0xb9, 0xff, 0x09, 0xce, 0x06, 0xb7, 0xc8, 0xc5, 0x89, 0x9a, 0x7f, 0x0e, 0x27, 0x6f, 0xe7, 0x69,
	0x83, 0xbc, 0xf5, 0x75, 0xfa, 0xc3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x24, 0x56, 0x79,
	0x6d, 0x04, 0x00, 0x00,
}
